import os
import logging
import time
from functools import wraps
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from supabase import create_client, Client

# --- –ë–õ–û–ö 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    SUPABASE_URL = os.environ['SUPABASE_URL']
    SUPABASE_KEY = os.environ['SUPABASE_KEY']
except KeyError:
    logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£–∫–∞–∂–∏—Ç–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ë–õ–û–ö 2: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –ö–û–õ–û–ù–û–ö –í SUPABASE ---
USERS_TABLE_TG_ID_COLUMN = 'tg_id'
USERS_TABLE_TG_USERNAME_COLUMN = 'tg'
PERSINFO_TABLE_TG_USERNAME_COLUMN = 'tg'
PERSINFO_TABLE_FULL_NAME_COLUMN = 'operator'
PERSINFO_TABLE_CITY_COLUMN = 'city'
PERSINFO_TABLE_TEAM_COLUMN = 'team'
PERSINFO_TABLE_DOLG_COLUMN = 'dolg'
PERSINFO_TABLE_PLAN_LID_COLUMN = 'plan_lid'
PERSINFO_TABLE_RGTM_COLUMN = 'tg_rgtm'
PERSINFO_TABLE_TEAMLEAD_COLUMN = 'tg_teamlid'
PERSINFO_TABLE_URL_COLUMN = 'url' # <-- –ù–û–í–ê–Ø –ö–û–õ–û–ù–ö–ê

TMDAY_TABLE_TG_USERNAME_COLUMN = 'tg'
TMDAY_TABLE_LID_COLUMN = 'lid'
TMDAY_TABLE_TRAFIC_COLUMN = 'trafic'
TMDAY_TABLE_KZ_COLUMN = 'kz'

TMMONTH_TABLE_TG_USERNAME_COLUMN = 'tg'
TMMONTH_TABLE_COS_COLUMN = 'cos'
TMMONTH_TABLE_MOLNII_COLUMN = 'molnii'

# --- –ë–õ–û–ö 3: URL –î–õ–Ø WEB APPS –ò –°–°–´–õ–û–ö ---
URL_KNOWLEDGE_BASE = "https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"
URL_DASHBOARD = "https://aleksei23122012.github.io/DMdashbordbot/conc/conc.html"
URL_ALMANAC = "https://aleksei23122012.github.io/DMdashbordbot/ov/ov.html"
URL_YUMMY_FORM = "https://forms.gle/KML4YXA4osd6aaWS7"
URL_GAMIFICATION = "https://marketing-house-appp.vercel.app/"

# --- –ë–õ–û–ö 4: –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ê–î–ú–ò–ù–ê ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        if not user or not user.username:
            await update.message.reply_text("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥–∏–Ω (username) –≤ Telegram.")
            return
        try:
            response = supabase.table('persinfo').select(PERSINFO_TABLE_DOLG_COLUMN).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
            if response.data and response.data[0].get(PERSINFO_TABLE_DOLG_COLUMN) == "–ê–¥–º–∏–Ω":
                return await func(update, context, *args, **kwargs)
            else:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user.username}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return
    return wrapped

# --- –ë–õ–û–ö 5: –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω (username) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –Ω–∞–∂–∞–ª /start.")
    try:
        supabase.table('users').insert({USERS_TABLE_TG_ID_COLUMN: user.id, USERS_TABLE_TG_USERNAME_COLUMN: user.username}).execute()
    except Exception:
        pass
    try:
        response = supabase.table('persinfo').select(f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_CITY_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_DOLG_COLUMN}").eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if not response.data:
            await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        data = response.data[0]
        full_name = data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, 'N/A')
        city = data.get(PERSINFO_TABLE_CITY_COLUMN, 'N/A')
        team = data.get(PERSINFO_TABLE_TEAM_COLUMN, 'N/A')
        dolg = data.get(PERSINFO_TABLE_DOLG_COLUMN, 'N/A')
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}! ‚úã\n–í—ã {dolg} –∏–∑ {team}, –∏–∑ –≥–æ—Ä–æ–¥–∞ {city}, –≤–µ—Ä–Ω–æ?"
        keyboard = [[InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="auth_yes"), InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –≤–µ—Ä–Ω–æ", callback_data="auth_no")]]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'persinfo': {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == "auth_yes":
        await query.edit_message_text(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é...")
        await send_welcome_message_with_menu(update, context)
    elif query.data == "auth_no":
        await query.edit_message_text(text="–ù–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, —è –µ—â–µ –æ–±—É—á–∞—é—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @mikiooshi")

async def send_welcome_message_with_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    keyboard_layout = []
    
    try:
        response = supabase.table('persinfo').select(PERSINFO_TABLE_URL_COLUMN).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if response.data:
            crm_url = response.data[0].get(PERSINFO_TABLE_URL_COLUMN)
            if crm_url:
                keyboard_layout.append([InlineKeyboardButton("CRM", url=crm_url)])
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É CRM –¥–ª—è {user.username}: {e}")
        
    keyboard_layout.extend([
        [InlineKeyboardButton("–î–∞—à–±–æ—Ä–¥", web_app=WebAppInfo(url=URL_DASHBOARD))],
        [InlineKeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url=URL_ALMANAC))],
        [InlineKeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", url=URL_KNOWLEDGE_BASE)],
        [InlineKeyboardButton("–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è", web_app=WebAppInfo(url=URL_GAMIFICATION))]
    ])
    reply_markup = InlineKeyboardMarkup(keyboard_layout)
    
    welcome_text = (
        "–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–Ω—Å—å–µ—Ä–∂ –Ω–∞ —Å–≤—è–∑–∏. ü§µ\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "‚ú® CRM - —Å—Å—ã–ª–∫–∞ –Ω–∞ CRM –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã üíº\n"
        "‚ú® –î–∞—à–±–æ—Ä–¥ ‚Äî –≤—Å—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É —Ç–µ–±—è –ø–æ–¥ —Ä—É–∫–æ–π üìä\n"
        "‚ú® –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π ‚Äî —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚õîÔ∏è\n"
        "‚ú® –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ —Å–æ–≤–µ—Ç—ã üìí\n"
        "‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –ö–û–°—ã –∏ –º–æ–ª–Ω–∏–∏: /cos ‚öñÔ∏è\n"
        "‚ú® –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: /yummy ‚úçÔ∏è\n"
        "‚ú® –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: /breakfast /lunch /dinner ü•®\n"
        "‚ú® –ù–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π üîî"
    )
    try:
        response = supabase.table('persinfo').select(PERSINFO_TABLE_DOLG_COLUMN).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if response.data and response.data[0].get(PERSINFO_TABLE_DOLG_COLUMN) == "–ê–¥–º–∏–Ω":
            welcome_text += "\n‚ú® –ü–∞–º—è—Ç–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º –∑–¥–µ—Å—å /admin üéÆ"
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
    await context.bot.send_message(chat_id=chat_id, text=welcome_text, reply_markup=reply_markup)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await send_welcome_message_with_menu(update, context)

async def breakfast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return
    try:
        response = supabase.table('persinfo').select(f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_RGTM_COLUMN}, {PERSINFO_TABLE_TEAMLEAD_COLUMN}, {PERSINFO_TABLE_PLAN_LID_COLUMN}").eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if not response.data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return
        data = response.data[0]
        current_date = datetime.now().strftime("%d.%m.%Y")
        plan_lid = data.get(PERSINFO_TABLE_PLAN_LID_COLUMN, 0)
        operator_name = data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, "–ò–º—è–§–∞–º–∏–ª–∏—è")
        hashtag_name = operator_name.replace(" ", "")
        team = data.get(PERSINFO_TABLE_TEAM_COLUMN, "–ö–æ–º–∞–Ω–¥–∞")
        rgtm = data.get(PERSINFO_TABLE_RGTM_COLUMN, "–ª–æ–≥–∏–Ω_—Ä–≥—Ç–º")
        teamlid = data.get(PERSINFO_TABLE_TEAMLEAD_COLUMN, "–ª–æ–≥–∏–Ω_—Ç–∏–º–ª–∏–¥–∞")
        breakfast_text = (
            f"–ü–õ–ê–ù {current_date}\n\n"
            f"–õ–∏–¥—ã: {plan_lid}\n"
            "–¢—Ä–∞—Ñ–∏–∫: 03:00:00\n"
            "–ö–ó: 300\n\n"
            f"#{hashtag_name}\n"
            f"#{team}\n"
            f"@{rgtm}\n"
            f"@{teamlid}"
        )
        await update.message.reply_text(breakfast_text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /breakfast –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

async def lunch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username.")
        return
    try:
        persinfo_response = supabase.table('persinfo').select(f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_RGTM_COLUMN}, {PERSINFO_TABLE_TEAMLEAD_COLUMN}").eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        tmday_response = supabase.table('TMday').select(f"{TMDAY_TABLE_LID_COLUMN}, {TMDAY_TABLE_TRAFIC_COLUMN}, {TMDAY_TABLE_KZ_COLUMN}").eq(TMDAY_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if not persinfo_response.data or not tmday_response.data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        p_data = persinfo_response.data[0]
        t_data = tmday_response.data[0]
        current_date = datetime.now().strftime("%d.%m.%Y")
        lid = t_data.get(TMDAY_TABLE_LID_COLUMN, 0)
        trafic = t_data.get(TMDAY_TABLE_TRAFIC_COLUMN, "00:00:00")
        kz = t_data.get(TMDAY_TABLE_KZ_COLUMN, 0)
        operator_name = p_data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, "–ò–º—è–§–∞–º–∏–ª–∏—è")
        hashtag_name = operator_name.replace(" ", "")
        team = p_data.get(PERSINFO_TABLE_TEAM_COLUMN, "–ö–æ–º–∞–Ω–¥–∞")
        rgtm = p_data.get(PERSINFO_TABLE_RGTM_COLUMN, "–ª–æ–≥–∏–Ω_—Ä–≥—Ç–º")
        teamlid = p_data.get(PERSINFO_TABLE_TEAMLEAD_COLUMN, "–ª–æ–≥–∏–Ω_—Ç–∏–º–ª–∏–¥–∞")
        lunch_text = (
            f"–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢ {current_date}\n\n"
            f"–õ–∏–¥—ã: {lid}\n"
            f"–¢—Ä–∞—Ñ–∏–∫: {trafic}\n"
            f"–ö–ó: {kz}\n\n"
            f"#{hashtag_name}\n"
            f"#{team}\n"
            f"@{rgtm}\n"
            f"@{teamlid}"
        )
        await update.message.reply_text(lunch_text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /lunch –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

async def dinner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username.")
        return
    try:
        persinfo_response = supabase.table('persinfo').select(f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_RGTM_COLUMN}, {PERSINFO_TABLE_TEAMLEAD_COLUMN}").eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        tmday_response = supabase.table('TMday').select(f"{TMDAY_TABLE_LID_COLUMN}, {TMDAY_TABLE_TRAFIC_COLUMN}, {TMDAY_TABLE_KZ_COLUMN}").eq(TMDAY_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if not persinfo_response.data or not tmday_response.data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        p_data = persinfo_response.data[0]
        t_data = tmday_response.data[0]
        current_date = datetime.now().strftime("%d.%m.%Y")
        lid = t_data.get(TMDAY_TABLE_LID_COLUMN, 0)
        trafic = t_data.get(TMDAY_TABLE_TRAFIC_COLUMN, "00:00:00")
        kz = t_data.get(TMDAY_TABLE_KZ_COLUMN, 0)
        operator_name = p_data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, "–ò–º—è–§–∞–º–∏–ª–∏—è")
        hashtag_name = operator_name.replace(" ", "")
        team = p_data.get(PERSINFO_TABLE_TEAM_COLUMN, "–ö–æ–º–∞–Ω–¥–∞")
        rgtm = p_data.get(PERSINFO_TABLE_RGTM_COLUMN, "–ª–æ–≥–∏–Ω_—Ä–≥—Ç–º")
        teamlid = p_data.get(PERSINFO_TABLE_TEAMLEAD_COLUMN, "–ª–æ–≥–∏–Ω_—Ç–∏–º–ª–∏–¥–∞")
        dinner_text = (
            f"–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ {current_date}\n\n"
            f"–õ–∏–¥—ã: {lid}\n"
            f"–¢—Ä–∞—Ñ–∏–∫: {trafic}\n"
            f"–ö–ó: {kz}\n\n"
            "–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: 08:30\n"
            "–í—Ä–µ–º—è —É—Ö–æ–¥–∞: 18:00\n\n"
            f"#{hashtag_name}\n"
            f"#{team}\n"
            f"@{rgtm}\n"
            f"@{teamlid}"
        )
        await update.message.reply_text(dinner_text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /dinner –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

async def yummy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = f'–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è —à–µ—Ñ-–ø–æ–≤–∞—Ä—É –ø–æ <a href="{URL_YUMMY_FORM}">—Å—Å—ã–ª–∫–µ</a> üìã'
    await update.message.reply_text(text, parse_mode='HTML')

async def cos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username.")
        return
    try:
        response = supabase.table('TMmonth').select(f"{TMMONTH_TABLE_COS_COLUMN}, {TMMONTH_TABLE_MOLNII_COLUMN}").eq(TMMONTH_TABLE_TG_USERNAME_COLUMN, user.username).execute()
        if not response.data:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ö–û–°–∞–º –∏ –º–æ–ª–Ω–∏—è–º –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
            return
        data = response.data[0]
        cos_count = data.get(TMMONTH_TABLE_COS_COLUMN, 0)
        molnii_count = data.get(TMMONTH_TABLE_MOLNII_COLUMN, 0)
        text = f"–£ –≤–∞—Å {cos_count} –∫–æ—Å–æ–≤ üëé –∏ {molnii_count} –º–æ–ª–Ω–∏–π ‚ö°Ô∏è"
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /cos –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# --- –ë–õ–û–ö 6: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ---
@admin_only
async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    admin_text = (
        "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/stats - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –ë–î\n"
        "/broadcast <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –ë–î\n"
        "/broadcast_team <–∫–æ–º–∞–Ω–¥–∞> <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–π —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ\n"
        "/broadcast_city <–≥–æ—Ä–æ–¥> <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "/broadcast_dolg <–¥–æ–ª–∂–Ω–æ—Å—Ç—å> <—Ç–µ–∫—Å—Ç> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
    )
    await update.message.reply_text(admin_text)

@admin_only
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        response = supabase.table('users').select('*', count='exact').execute()
        await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {response.count}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def _do_broadcast(target_ids, message_text, update, context):
    sent_count = 0
    for user_id in target_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            sent_count += 1
            time.sleep(0.1)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    return sent_count

@admin_only
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = " ".join(context.args)
    if not message_text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö>")
        return
    try:
        response = supabase.table('users').select(USERS_TABLE_TG_ID_COLUMN).execute()
        user_ids = [user[USERS_TABLE_TG_ID_COLUMN] for user in response.data]
        await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        sent_count = await _do_broadcast(user_ids, message_text, update, context)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(user_ids)}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

async def _get_users_by_filter(filter_column, filter_value):
    persinfo_resp = supabase.table('persinfo').select(PERSINFO_TABLE_TG_USERNAME_COLUMN).eq(filter_column, filter_value).execute()
    usernames = [user[PERSINFO_TABLE_TG_USERNAME_COLUMN] for user in persinfo_resp.data]
    if not usernames:
        return None
    users_resp = supabase.table('users').select(USERS_TABLE_TG_ID_COLUMN).in_(USERS_TABLE_TG_USERNAME_COLUMN, usernames).execute()
    return [user[USERS_TABLE_TG_ID_COLUMN] for user in users_resp.data]

@admin_only
async def broadcast_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_team <–ö–æ–º–∞–Ω–¥–∞> <—Ç–µ–∫—Å—Ç>")
        return
    team_name, message_text = context.args[0], " ".join(context.args[1:])
    try:
        user_ids = await _get_users_by_filter(PERSINFO_TABLE_TEAM_COLUMN, team_name)
        if user_ids is None:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ '{team_name}'.")
            return
        await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}' ({len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)...")
        sent_count = await _do_broadcast(user_ids, message_text, update, context)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(user_ids)}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ: {e}")

@admin_only
async def broadcast_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_city <–ì–æ—Ä–æ–¥> <—Ç–µ–∫—Å—Ç>")
        return
    city_name, message_text = context.args[0], " ".join(context.args[1:])
    try:
        user_ids = await _get_users_by_filter(PERSINFO_TABLE_CITY_COLUMN, city_name)
        if user_ids is None:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –≥–æ—Ä–æ–¥–∞ '{city_name}'.")
            return
        await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}' ({len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)...")
        sent_count = await _do_broadcast(user_ids, message_text, update, context)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(user_ids)}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ –≥–æ—Ä–æ–¥—É: {e}")

@admin_only
async def broadcast_dolg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_dolg <–î–æ–ª–∂–Ω–æ—Å—Ç—å> <—Ç–µ–∫—Å—Ç>")
        return
    dolg_name, message_text = context.args[0], " ".join(context.args[1:])
    try:
        user_ids = await _get_users_by_filter(PERSINFO_TABLE_DOLG_COLUMN, dolg_name)
        if user_ids is None:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é '{dolg_name}'.")
            return
        await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{dolg_name}' ({len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)...")
        sent_count = await _do_broadcast(user_ids, message_text, update, context)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{dolg_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(user_ids)}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")

# --- –ë–õ–û–ö 7: –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î ---
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("breakfast", breakfast))
    application.add_handler(CommandHandler("lunch", lunch))
    application.add_handler(CommandHandler("dinner", dinner))
    application.add_handler(CommandHandler("yummy", yummy))
    application.add_handler(CommandHandler("cos", cos))
    
    application.add_handler(CommandHandler("admin", admin_help))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("broadcast_team", broadcast_team))
    application.add_handler(CommandHandler("broadcast_city", broadcast_city))
    application.add_handler(CommandHandler("broadcast_dolg", broadcast_dolg))

    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
