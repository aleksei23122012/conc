import os
import logging
import time
from functools import wraps
from datetime import datetime # –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from supabase import create_client, Client

# --- –ë–õ–û–ö 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    SUPABASE_URL = os.environ['SUPABASE_URL']
    SUPABASE_KEY = os.environ['SUPABASE_KEY']
except KeyError:
    logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£–∫–∞–∂–∏—Ç–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ë–õ–û–ö 2: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –ö–û–õ–û–ù–û–ö –í SUPABASE ---
USERS_TABLE_TG_ID_COLUMN = 'tg_id'
USERS_TABLE_TG_USERNAME_COLUMN = 'tg'

# –¢–∞–±–ª–∏—Ü–∞ persinfo
PERSINFO_TABLE_TG_USERNAME_COLUMN = 'tg'
PERSINFO_TABLE_FULL_NAME_COLUMN = 'operator'
PERSINFO_TABLE_CITY_COLUMN = 'city'
PERSINFO_TABLE_TEAM_COLUMN = 'team'
PERSINFO_TABLE_DOLG_COLUMN = 'dolg'
PERSINFO_TABLE_PLAN_LID_COLUMN = 'plan_lid' # –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
PERSINFO_TABLE_RGTM_COLUMN = 'tg_rgtm' # –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
PERSINFO_TABLE_TEAMLEAD_COLUMN = 'tg_teamlid' # –ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞

# –¢–∞–±–ª–∏—Ü–∞ TMday
TMDAY_TABLE_TG_USERNAME_COLUMN = 'tg'
TMDAY_TABLE_LID_COLUMN = 'lid'
TMDAY_TABLE_TRAFIC_COLUMN = 'trafic'
TMDAY_TABLE_KZ_COLUMN = 'kz'


# --- –ë–õ–û–ö 3: URL –î–õ–Ø WEB APPS –ò –°–°–´–õ–û–ö ---
URL_KNOWLEDGE_BASE = "https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"
URL_DASHBOARD = "https://aleksei23122012.github.io/DMdashbordbot/conc/conc.html"
URL_ALMANAC = "https://aleksei23122012.github.io/DMdashbordbot/ov/ov.html"
URL_OTZIV = "https://forms.gle/KML4YXA4osd6aaWS7"
URL_GAMIFICATION = "https://marketing-house-appp.vercel.app/" # –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞

# --- –ë–õ–û–ö 4: –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ê–î–ú–ò–ù–ê ---
def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        if not user or not user.username:
            await update.message.reply_text("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥–∏–Ω (username) –≤ Telegram.")
            return
        try:
            response = supabase.table('persinfo').select(PERSINFO_TABLE_DOLG_COLUMN).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()
            if response.data and response.data.get(PERSINFO_TABLE_DOLG_COLUMN) == "–ê–¥–º–∏–Ω":
                return await func(update, context, *args, **kwargs)
            else:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è {user.username}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return
    return wrapped

# --- –ë–õ–û–ö 5: –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ –ª–æ–≥–∏–Ω (username) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} (ID: {user.id}) –Ω–∞–∂–∞–ª /start.")
    try:
        supabase.table('users').insert({USERS_TABLE_TG_ID_COLUMN: user.id, USERS_TABLE_TG_USERNAME_COLUMN: user.username}).execute()
    except Exception:
        pass
    try:
        select_query = f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_CITY_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_DOLG_COLUMN}"
        response = supabase.table('persinfo').select(select_query).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()
        if not response.data:
            await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        full_name = response.data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, 'N/A')
        city = response.data.get(PERSINFO_TABLE_CITY_COLUMN, 'N/A')
        team = response.data.get(PERSINFO_TABLE_TEAM_COLUMN, 'N/A')
        dolg = response.data.get(PERSINFO_TABLE_DOLG_COLUMN, 'N/A')
        # –ò–ó–ú–ï–ù–ï–ù–û: –§–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}! ‚úã\n–í—ã {dolg} –∏–∑ {team}, –∏–∑ –≥–æ—Ä–æ–¥–∞ {city}, –≤–µ—Ä–Ω–æ?"
        keyboard = [[InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="auth_yes"), InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –≤–µ—Ä–Ω–æ", callback_data="auth_no")]]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'persinfo': {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == "auth_yes":
        await query.edit_message_text(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é...")
        await send_welcome_message_with_menu(update, context)
    elif query.data == "auth_no":
        # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await query.edit_message_text(text="–ù–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, —è –µ—â–µ –æ–±—É—á–∞—é—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @mikiooshi")

async def send_welcome_message_with_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    # –ò–ó–ú–ï–ù–ï–ù–û: –ö–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞—é—Ç –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
    keyboard = [
        [InlineKeyboardButton("–î–∞—à–±–æ—Ä–¥", web_app=WebAppInfo(url=URL_DASHBOARD))],
        [InlineKeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url=URL_ALMANAC))],
        [InlineKeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", url=URL_KNOWLEDGE_BASE)], # <-- WebApp —É–±—Ä–∞–Ω, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
        [InlineKeyboardButton("–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è", url=URL_GAMIFICATION)], # <-- –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞
        [InlineKeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", web_app=WebAppInfo(url=URL_OTZIV))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ö–æ–Ω—Å—å–µ—Ä–∂ –Ω–∞ —Å–≤—è–∑–∏. ü§µ\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "‚ú® –î–∞—à–±–æ—Ä–¥ ‚Äî –≤—Å—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É —Ç–µ–±—è –ø–æ–¥ —Ä—É–∫–æ–π üìä\n"
        "‚ú® –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π ‚Äî —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚õîÔ∏è\n"
        "‚ú® –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ —Å–æ–≤–µ—Ç—ã üìí\n"
        "‚ú® –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–æ–¥–µ–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é ‚úçÔ∏è\n"
        "‚ú® –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: /breakfast /lunch /dinner ü•®\n"
        "‚ú® –ù–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π üîî"
    )
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. —Å—Ç—Ä–æ–∫—É
    try:
        response = supabase.table('persinfo').select(PERSINFO_TABLE_DOLG_COLUMN).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()
        if response.data and response.data.get(PERSINFO_TABLE_DOLG_COLUMN) == "–ê–¥–º–∏–Ω":
            welcome_text += "\n‚ú® –ü–∞–º—è—Ç–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º –∑–¥–µ—Å—å /admin üéÆ"
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")

    await context.bot.send_message(chat_id=chat_id, text=welcome_text, reply_markup=reply_markup)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await send_welcome_message_with_menu(update, context)

# --- –ë–õ–û–ö 5.1: –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–ß–ï–¢–û–í ---
async def breakfast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ persinfo
        select_query = f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_RGTM_COLUMN}, {PERSINFO_TABLE_TEAMLEAD_COLUMN}, {PERSINFO_TABLE_PLAN_LID_COLUMN}"
        persinfo_response = supabase.table('persinfo').select(select_query).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()
        
        if not persinfo_response.data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            return

        data = persinfo_response.data
        current_date = datetime.now().strftime("%d.%m.%Y")
        plan_lid = data.get(PERSINFO_TABLE_PLAN_LID_COLUMN, 0)
        operator_name = data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, "–ò–º—è–§–∞–º–∏–ª–∏—è")
        hashtag_name = operator_name.replace(" ", "")
        team = data.get(PERSINFO_TABLE_TEAM_COLUMN, "–ö–æ–º–∞–Ω–¥–∞")
        rgtm = data.get(PERSINFO_TABLE_RGTM_COLUMN, "–ª–æ–≥–∏–Ω_—Ä–≥—Ç–º")
        teamlid = data.get(PERSINFO_TABLE_TEAMLEAD_COLUMN, "–ª–æ–≥–∏–Ω_—Ç–∏–º–ª–∏–¥–∞")
        
        # –°–æ–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
        breakfast_text = (
            "–ù–µ –∑–∞–±—É–¥—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–∏!\n\n\n"
            f"–ü–õ–ê–ù {current_date}\n\n"
            f"–õ–∏–¥—ã: {plan_lid}\n"
            "–¢—Ä–∞—Ñ–∏–∫: 03:00:00\n" # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã –ø–æ –≤–∞—à–µ–º—É –¢–ó
            "–ö–ó: 300\n\n"
            f"<b>#{hashtag_name}</b>\n"
            f"#{team}\n"
            f"@{rgtm}\n"
            f"@{teamlid}"
        )
        await update.message.reply_text(breakfast_text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /breakfast –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

async def lunch(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username.")
        return
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ persinfo
        persinfo_select = f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_RGTM_COLUMN}, {PERSINFO_TABLE_TEAMLEAD_COLUMN}"
        persinfo_response = supabase.table('persinfo').select(persinfo_select).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()
        
        # –ó–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ TMday
        tmday_select = f"{TMDAY_TABLE_LID_COLUMN}, {TMDAY_TABLE_TRAFIC_COLUMN}, {TMDAY_TABLE_KZ_COLUMN}"
        tmday_response = supabase.table('TMday').select(tmday_select).eq(TMDAY_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()

        if not persinfo_response.data or not tmday_response.data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return

        p_data = persinfo_response.data
        t_data = tmday_response.data
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        lid = t_data.get(TMDAY_TABLE_LID_COLUMN, 0)
        trafic = t_data.get(TMDAY_TABLE_TRAFIC_COLUMN, "00:00:00")
        kz = t_data.get(TMDAY_TABLE_KZ_COLUMN, 0)
        operator_name = p_data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, "–ò–º—è–§–∞–º–∏–ª–∏—è")
        hashtag_name = operator_name.replace(" ", "")
        team = p_data.get(PERSINFO_TABLE_TEAM_COLUMN, "–ö–æ–º–∞–Ω–¥–∞")
        rgtm = p_data.get(PERSINFO_TABLE_RGTM_COLUMN, "–ª–æ–≥–∏–Ω_—Ä–≥—Ç–º")
        teamlid = p_data.get(PERSINFO_TABLE_TEAMLEAD_COLUMN, "–ª–æ–≥–∏–Ω_—Ç–∏–º–ª–∏–¥–∞")
        
        lunch_text = (
            f"–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢ {current_date}\n\n"
            f"–õ–∏–¥—ã: {lid}\n"
            f"–¢—Ä–∞—Ñ–∏–∫: {trafic}\n"
            f"–ö–ó: {kz}\n\n"
            f"<b>#{hashtag_name}</b>\n"
            f"#{team}\n"
            f"@{rgtm}\n"
            f"@{teamlid}"
        )
        await update.message.reply_text(lunch_text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /lunch –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

async def dinner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if not user.username:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à username.")
        return
    try:
        persinfo_select = f"{PERSINFO_TABLE_FULL_NAME_COLUMN}, {PERSINFO_TABLE_TEAM_COLUMN}, {PERSINFO_TABLE_RGTM_COLUMN}, {PERSINFO_TABLE_TEAMLEAD_COLUMN}"
        persinfo_response = supabase.table('persinfo').select(persinfo_select).eq(PERSINFO_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()
        
        tmday_select = f"{TMDAY_TABLE_LID_COLUMN}, {TMDAY_TABLE_TRAFIC_COLUMN}, {TMDAY_TABLE_KZ_COLUMN}"
        tmday_response = supabase.table('TMday').select(tmday_select).eq(TMDAY_TABLE_TG_USERNAME_COLUMN, user.username).single().execute()

        if not persinfo_response.data or not tmday_response.data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return

        p_data = persinfo_response.data
        t_data = tmday_response.data
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        lid = t_data.get(TMDAY_TABLE_LID_COLUMN, 0)
        trafic = t_data.get(TMDAY_TABLE_TRAFIC_COLUMN, "00:00:00")
        kz = t_data.get(TMDAY_TABLE_KZ_COLUMN, 0)
        operator_name = p_data.get(PERSINFO_TABLE_FULL_NAME_COLUMN, "–ò–º—è–§–∞–º–∏–ª–∏—è")
        hashtag_name = operator_name.replace(" ", "")
        team = p_data.get(PERSINFO_TABLE_TEAM_COLUMN, "–ö–æ–º–∞–Ω–¥–∞")
        rgtm = p_data.get(PERSINFO_TABLE_RGTM_COLUMN, "–ª–æ–≥–∏–Ω_—Ä–≥—Ç–º")
        teamlid = p_data.get(PERSINFO_TABLE_TEAMLEAD_COLUMN, "–ª–æ–≥–∏–Ω_—Ç–∏–º–ª–∏–¥–∞")
        
        dinner_text = (
            f"–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ {current_date}\n\n"
            f"–õ–∏–¥—ã: {lid}\n"
            f"–¢—Ä–∞—Ñ–∏–∫: {trafic}\n"
            f"–ö–ó: {kz}\n\n"
            "–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: 08:30\n"
            "–í—Ä–µ–º—è —É—Ö–æ–¥–∞: 18:00\n\n"
            f"<b>#{hashtag_name}</b>\n"
            f"#{team}\n"
            f"@{rgtm}\n"
            f"@{teamlid}"
        )
        await update.message.reply_text(dinner_text, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /dinner –¥–ª—è {user.username}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")


# --- –ë–õ–û–ö 6: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç admin_help –¥–æ broadcast_dolg –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏) ...


# --- –ë–õ–û–ö 7: –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("breakfast", breakfast))
    application.add_handler(CommandHandler("lunch", lunch))
    application.add_handler(CommandHandler("dinner", dinner))
    
    application.add_handler(CommandHandler("admin", admin_help))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("broadcast_team", broadcast_team))
    application.add_handler(CommandHandler("broadcast_city", broadcast_city))
    application.add_handler(CommandHandler("broadcast_dolg", broadcast_dolg))

    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
